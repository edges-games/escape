// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        time: { value: 1.0 }
        noiselevel: { value: 0.4 }
        ghostreflectionlevel: { value: 1.03 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Properties
  {
    float time;
    float noiselevel;
    float ghostreflectionlevel;
  };

  float rand(vec2 co){
      return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
  }

  void main () {
    float randomValue = rand(vec2(v_uv0.x+sin(time), v_uv0.y+cos(time)));
  	vec4 movieColor = texture(texture, v_uv0);
    vec4 noiseColor = vec4(randomValue - 0.3,randomValue- 0.3,randomValue- 0.3,0.6);
 
    if(randomValue > 0.55-ghostreflectionlevel)
    {
    	noiseColor = abs(noiseColor - 0.2);
    }
    
    gl_FragColor = mix(movieColor, noiseColor, noiselevel);  
  }
}%
