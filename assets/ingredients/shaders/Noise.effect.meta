{
  "ver": "1.0.25",
  "uuid": "3cdb49aa-a31e-4232-bf31-2be236a7b43c",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float time;\nuniform float noiselevel;\nuniform float ghostreflectionlevel;\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid main () {\n  float randomValue = rand(vec2(v_uv0.x+sin(time), v_uv0.y+cos(time)));\n  vec4 movieColor = texture2D(texture, v_uv0);\n  vec4 noiseColor = vec4(randomValue - 0.3,randomValue- 0.3,randomValue- 0.3,0.6);\n  if(randomValue > 0.55-ghostreflectionlevel)\n  {\n    noiseColor = abs(noiseColor - 0.2);\n  }\n  gl_FragColor = mix(movieColor, noiseColor, noiselevel);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Properties\n{\n  float time;\n  float noiselevel;\n  float ghostreflectionlevel;\n};\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid main () {\n  float randomValue = rand(vec2(v_uv0.x+sin(time), v_uv0.y+cos(time)));\n  vec4 movieColor = texture(texture, v_uv0);\n  vec4 noiseColor = vec4(randomValue - 0.3,randomValue- 0.3,randomValue- 0.3,0.6);\n  if(randomValue > 0.55-ghostreflectionlevel)\n  {\n    noiseColor = abs(noiseColor - 0.2);\n  }\n  gl_FragColor = mix(movieColor, noiseColor, noiselevel);\n}"
      }
    }
  ],
  "subMetas": {}
}